openapi: 3.0.0
info:
  title: "Spotify Web API - Microservices"
  description: |
    This API defines the back-end services for the Spotify-inspired web application, 
    including authentication, user management, media services, search functionality, 
    and personalized Suggestions.

    **Authors:**
      - João Oliveira, fc56908
      - Sebastião Cancela, fc58282
      
  version: 1.2.0


servers:
  - url: "/api"
    description: "Local Development Server"


tags:
  - name: "Auth Service"
    description: "Endpoints for authentication and session management"
  - name: "User Service - User and Profile"
    description: "User management and profile operations"
  - name: "User Service - Activity, Queue, Playlists, Favorites and Follows"
    description: "User media related information"
  - name: "Media Service - Tracks, Albums and Artists"
    description: "Operations for managing tracks, albums and artists"
  - name: "Media Service - Podcasts and Episodes"
    description: "Operations for managing podcasts and episodes"
  - name: "Media Service - Playback"
    description: "Playback controls"
  - name: "Search Service"
    description: "Search functionality for all media types"
  - name: "Suggestion Service"
    description: "Personalized suggestions based on user activity"


paths:
#Auth service
  /auth/signup:
    post:
      tags:
        - "Auth Service"
      summary: "Sign up a new user"
      description: "Registers a new user and returns an authentication token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "The email of the user."
                  example: "user@example.com"
                username:
                  type: string
                  description: "The username for the new user."
                  example: "user123"
                password:
                  type: string
                  description: "The password for the new user (it will be hashed)."
                  example: "securePassword123"
      responses:
        "201":
          description: "User registered successfully, token generated."
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: "JWT token for authenticating further requests"
        "400":
          description: "Invalid input data"
        "409":
          description: "User already exists"

  /auth/login:
    post:
      tags:
        - "Auth Service"
      summary: "User login"
      description: "Authenticates a user and returns an access token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: "Successful authentication"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: "Unauthorized - Invalid credentials"

  /auth/refresh:
    post:
      tags:
        - "Auth Service"
      summary: "Refresh authentication token"
      description: "Generates a new access token using a refresh token. The previous refresh token will be invalidated automatically."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        "200":
          description: "Token refreshed successfully. A new access token and refresh token are provided."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: "Unauthorized - Invalid or expired refresh token"

  /auth/verify:
    post:
      tags:
        - "Auth Service"
      summary: "Verify user account"
      description: "Verifies the user's email or account via a token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerificationRequest"
      responses:
        "200":
          description: "Account verified successfully"
        "400":
          description: "Invalid verification token"

  /auth/logout:
    delete:
      tags:
        - "Auth Service"
      summary: "Logout user"
      description: "Terminates the current authentication session."
      responses:
        "204":
          description: "Logged out successfully"
        "401":
          description: "Unauthorized - No active session"

  /auth/sessions:
    get:
      tags:
        - "Auth Service"
      summary: "Get active sessions"
      description: "Retrieves the list of active sessions for the authenticated user."
      responses:
        "200":
          description: "List of active sessions"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Session"

  /auth/sessions/{session_id}:
    get:
      tags:
        - "Auth Service"
      summary: "Get session details"
      description: "Retrieves details of a specific session."
      parameters:
        - name: "session_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Session details retrieved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        "404":
          description: "Session not found"

    delete:
      tags:
        - "Auth Service"
      summary: "Terminate a session"
      description: "Ends a specific user session. The user can only delete their own sessions."
      parameters:
        - name: "session_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Session terminated successfully"
        "403":
          description: "Forbidden - User is not allowed to terminate this session"
        "404":
          description: "Session not found"
  
 
#User service        
  /users:
    post:
      tags:
        - "User Service - User and Profile"
      summary: "Create a new user"
      description: "Registers a new user with an email and username."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: "User created successfully"
        "400":
          description: "Invalid input data"
  
  /users/{user_id}:
    put:
      tags:
        - "User Service - User and Profile"
      summary: "Update user account details"
      description: "Allows a user to update their account details. Only the user themselves or an admin can perform this operation."
      parameters:
        - name: "user_id"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: "User updated successfully"
        "403":
          description: "Forbidden - You do not have permission to update this user."
        "404":
          description: "User not found"
  
    delete:
      tags:
        - "User Service - User and Profile"
      summary: "Delete user account"
      description: "Allows a user to delete their account. Only the user themselves or an admin can perform this operation."
      parameters:
        - name: "user_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "User deleted successfully"
        "403":
          description: "Forbidden - You do not have permission to delete this user."
        "404":
          description: "User not found"

  /users/{user_id}/profile:
    get:
      tags:
        - "User Service - User and Profile"
      summary: "Get user's profile"
      description: "Retrieves the public profile of the authenticated user."
      parameters:
        - name: "user_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "User profile returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"

  /users/{user_id}/profile/following:
    get:
      tags:
        - "User Service - User and Profile"
      summary: "Get following list of a user"
      description: "Returns a list of users, artists, and podcasts that the specified user follows."
      parameters:
        - name: "user_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "List of followed entities retrieved"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Following"

  /users/{user_id}/profile/followers:
    get:
      tags:
        - "User Service - User and Profile"
      summary: "Get followers of a user"
      description: "Returns the list of users who follow a given user."
      parameters:
        - name: "user_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "List of followers retrieved"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Profile"

  /users/me:
    get:
      tags:
        - "User Service - User and Profile"
      summary: "Get authenticated user's details"
      description: "Retrieve the details of the authenticated user, including profile and status."
      parameters: []
      responses:
        "200":
          description: "User details retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorized - Invalid or expired token"
    put:
      tags:
        - "User Service - User and Profile"
      summary: "Update user account details"
      description: "Allows a user to update their account details."
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: "User updated successfully"
        "401":
          description: "Unauthorized - Invalid or expired token"
        "404":
          description: "User not found"
  
    delete:
      tags:
        - "User Service - User and Profile"
      summary: "Delete user account"
      description: "Permanently deletes a user account."
      parameters: []
      responses:
        "204":
          description: "User deleted successfully"
        "401":
          description: "Unauthorized - Invalid or expired token"
        "404":
          description: "User not found"

  /users/me/profile:
    get:
      tags:
        - "User Service - User and Profile"
      summary: "Get user's profile"
      description: "Retrieves the public profile of the authenticated user."
      parameters: []
      responses:
        "200":
          description: "User profile returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"

    put:
      tags:
        - "User Service - User and Profile"
      summary: "Update user profile"
      description: "Updates the public profile of the authenticated user."
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileUpdate"
      responses:
        "200":
          description: "Profile updated successfully"

  /users/me/profile/following:
    get:
      tags:
        - "User Service - User and Profile"
      summary: "Get following list of a user"
      description: "Returns a list of users, artists, and podcasts that the specified user follows."
      parameters: []
      responses:
        "200":
          description: "List of followed entities retrieved"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Following"

  /users/me/profile/followers:
    get:
      tags:
        - "User Service - User and Profile"
      summary: "Get followers of a user"
      description: "Returns the list of users who follow a given user."
      parameters: []
      responses:
        "200":
          description: "List of followers retrieved"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Profile"

  /users/{user_id}/status:
    get:
      tags:
        - "User Service - User and Profile"
      summary: "Get account status"
      description: "Retrieves the status of a specific user's account."
      parameters:
        - name: "user_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Account status returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountStatus"
  
    put:
      tags:
        - "User Service - User and Profile"
      summary: "Update account status"
      description: "Updates the status of a specific user's account (e.g., active, suspended)."
      parameters:
        - name: "user_id"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountStatus"
      responses:
        "200":
          description: "Account status updated"
  
# User service Activity, Queue, Playlists, Favorites & Follows        
  /users/me/activity:
    get:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Get user activity history"
      description: "Retrieves the authenticated user's recent activity, such as played media and followed artists."
      responses:
        "200":
          description: "User activity retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Activity"
        "401":
          description: "Unauthorized - Invalid or expired token"
          
    post:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Add user activity"
      description: "Adds a new activity for the authenticated user (e.g., playing a track, following an artist)."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event_type:
                  type: string
                  description: "The type of the event (e.g., 'played_track', 'followed_artist')"
                  example: "played_track"
                event_data:
                  type: string
                  description: "Additional data for the event (e.g., track_id, artist_id)"
                  example: "track_12345"
                timestamp:
                  type: string
                  format: date-time
                  description: "The time when the activity happened"
                  example: "2025-03-24T15:30:00Z"
      responses:
        "201":
          description: "Activity added successfully"
        "400":
          description: "Invalid input data"
        "401":
          description: "Unauthorized - Invalid token"

  /users/me/queue:
    post:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Add one or more tracks to the playback queue"
      description: "Adds one or more tracks to the user's current playback queue."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                track_ids:
                  type: array
                  items:
                    type: string
                  description: "List of track IDs to add to the queue."
                  example: ["track_123", "track_456"]
      responses:
        "201":
          description: "Tracks added to queue successfully"
        "400":
          description: "Invalid track ID or request"
        "401":
          description: "Unauthorized - Invalid or expired token"

    get:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Get the current playback queue"
      description: "Retrieves the current playback queue for the authenticated user."
      responses:
        "200":
          description: "Queue retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Queue"
        "401":
          description: "Unauthorized - Invalid or expired token"
        "404":
          description: "No queue available or empty"

    put:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Reorder or update the entire playback queue"
      description: "Replaces or reorders the user's playback queue."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                queue:
                  type: array
                  description: "New list of track IDs to replace or reorder the queue."
                  items:
                    type: string
                  example: ["track_123", "track_456", "track_789"]
      responses:
        "200":
          description: "Queue successfully updated"
        "400":
          description: "Invalid queue data"
        "401":
          description: "Unauthorized - Invalid or expired token"

  /users/me/queue/{track_id}:
    delete:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Remove a track from the playback queue"
      description: "Removes a specific track from the user's playback queue."
      parameters:
        - name: "track_id"
          in: path
          required: true
          schema:
            type: string
          description: "ID of the track to remove from the queue."
      responses:
        "204":
          description: "Track removed from queue"
        "400":
          description: "Invalid track ID or request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid track ID."
        "401":
          description: "Unauthorized - Invalid or expired token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized - Invalid token"
        "404":
          description: "Track not found in queue"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Track with ID 'track_12345' not found in the queue."
 
  /users/{user_id}/playlists:
    get:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Get all playlists"
      description: "Retrieve a list of all available playlists."
      parameters:
        - name: "user_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "List of playlists retrieved"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Playlist"
        "401":
          description: "Unauthorized - Invalid or expired token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized - Invalid token"
        "404":
          description: "No playlists found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User with ID 'user_id' does not have playlists"

  /users/{user_id}/playlists/{playlist_id}:
    get:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Get details of a specific playlist"
      description: "Retrieve the details of a specific playlist belonging to the user."
      parameters:
        - name: "user_id"
          in: path
          required: true
          schema:
            type: string
        - name: "playlist_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Playlist details retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"
        "401":
          description: "Unauthorized - Invalid or expired token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized - Invalid token"
        "403":
          description: "Forbidden - User does not have permission to view this playlist"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden - You do not have permission to view this playlist."
        "404":
          description: "Playlist or User not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Playlist with ID 'playlist_id' not found for User with ID 'user_id'."
                    
  /users/me/playlists:
    post:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Create a new playlist"
      description: "Registers a new playlist."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Playlist"
      responses:
        "201":
          description: "Playlist created successfully"
        "400":
          description: "Invalid input data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid playlist data."
        "401":
          description: "Unauthorized - Invalid or expired token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized - Invalid token"

    get:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Get all playlists"
      description: "Retrieve a list of all available playlists."
      responses:
        "200":
          description: "List of playlists retrieved"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Playlist"
        "401":
          description: "Unauthorized - Invalid or expired token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized - Invalid token"
        "404":
          description: "No playlists found"
          
  /users/me/playlists/{playlist_id}:
    get:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Get playlist details"
      description: "Retrieve details of a specific playlist."
      parameters:
        - name: "playlist_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Playlist details retrieved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"
        "404":
          description: "Playlist not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Playlist with ID 'playlist_123' not found"
        "401":
          description: "Unauthorized - Invalid or expired token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized - Invalid token"
  
    put:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Update playlist details"
      description: "Modify details of a specific playlist."
      parameters:
        - name: "playlist_id"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaylistUpdate"
      responses:
        "200":
          description: "Playlist updated successfully"
        "404":
          description: "Playlist not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Playlist with ID 'playlist_123' not found"
        "400":
          description: "Invalid playlist data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid playlist update data"
        "401":
          description: "Unauthorized - Invalid or expired token"
  
    delete:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Delete a playlist"
      description: "Removes a specific playlist from the system."
      parameters:
        - name: "playlist_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Playlist deleted successfully"
        "404":
          description: "Playlist not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Playlist with ID 'playlist_123' not found"
        "401":
          description: "Unauthorized - Invalid or expired token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized - Invalid token"
                    
  /users/me/playlists/{playlist_id}/tracks:
    post:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Add track to playlist"
      description: "Adds a specific track to a playlist."
      parameters:
        - name: "playlist_id"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                track_id:
                  type: string
                  example: "track_123"
      responses:
        "201":
          description: "Track added to playlist successfully"
        "400":
          description: "Invalid track ID or playlist data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid track ID."
        "404":
          description: "Playlist not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Playlist with ID 'playlist_123' not found"
        "401":
          description: "Unauthorized - Invalid or expired token"
  
    get:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Get playlist tracks"
      description: "Retrieve all tracks from a playlist."
      parameters:
        - name: "playlist_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "List of tracks in the playlist retrieved"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Track"
        "404":
          description: "Playlist not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Playlist with ID 'playlist_123' not found"
        "401":
          description: "Unauthorized - Invalid or expired token"
  
    put:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Update playlist track order"
      description: "Modify the order of tracks in a playlist."
      parameters:
        - name: "playlist_id"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                track_ids:
                  type: array
                  items:
                    type: string
                    example: ["track_123", "track_456", "track_789"]
      responses:
        "200":
          description: "Playlist track order updated successfully"
        "404":
          description: "Playlist not found"
        "400":
          description: "Invalid track order data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid track order data"
        "401":
          description: "Unauthorized - Invalid or expired token"
          
  /users/me/playlists/{playlist_id}/tracks/{track_id}:
    delete:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Remove track from playlist"
      description: "Removes a specific track from a playlist."
      parameters:
        - name: "playlist_id"
          in: path
          required: true
          schema:
            type: string
        - name: "track_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Track removed from playlist successfully"
        "404":
          description: "Track or Playlist not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Track or Playlist not found"
        "401":
          description: "Unauthorized - Invalid or expired token"
          
  /users/me/favorites:
    post:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Add media to favorites"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                media_id:
                  type: string
                  description: "ID of the media to be added to favorites."
                  example: "track_12345"
      responses:
        "201":
          description: "Media added to favorites successfully"
        "400":
          description: "Invalid media type or malformed request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid media type"
        "409":
          description: "Media already exists in favorites"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Media already added to favorites"
        "401":
          description: "Unauthorized - Invalid or expired token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized - Invalid token"
        "404":
          description: "Media not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Media with ID 'track_123' not found."
                    
    get:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Get user favorite media"
      responses:
        "200":
          description: "Favorite media retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Favorite"
        "401":
          description: "Unauthorized - Invalid or expired token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized - Invalid or expired token"
        "404":
          description: "No favorite media found for the user"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User has no favorite media."
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error. Please try again later."
                    
  /users/me/favorites/{media_id}:
    delete:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Remove media from favorites"
      parameters:
        - name: "media_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Media removed from favorites successfully"
        "400":
          description: "Invalid media type or malformed request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid media type"
        "401":
          description: "Unauthorized - Invalid or expired token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized - Invalid token"
        "404":
          description: "Media not found in favorites"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Media with ID 'track_123' not found in favorites."
        "409":
          description: "Media not marked as favorite"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Media not found in favorites. Cannot remove."

  /users/me/me/follows:
    post:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Follow an entity (user, artist, podcast)"
      description: "Allows the authenticated user to follow a specified user, artist, or podcast."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: ["user", "artist", "podcast"]
                id:
                  type: string
      responses:
        "201":
          description: "Successfully followed the entity"
        "400":
          description: "Invalid data provided"
        "401":
          description: "Unauthorized - Invalid or expired token"

  /users/me/follows/{entity_id}:
    delete:
      tags:
        - "User Service - Activity, Queue, Playlists, Favorites and Follows"
      summary: "Unfollow an entity (user, artist, podcast)"
      description: "Allows the authenticated user to unfollow a specified user, artist, or podcast."
      parameters:
        - name: "entity_id"
          in: path
          required: true
          schema:
            type: string
        - name: "type"
          in: query
          required: true
          schema:
            type: string
            enum: ["user", "artist", "podcast"]
      responses:
        "204":
          description: "Successfully unfollowed the entity"
        "400":
          description: "Invalid data provided"
        "401":
          description: "Unauthorized - Invalid or expired token"


# Media service Tracks, Albums and Artists
  /media/tracks:
    post:
      tags:
      - "Media Service - Tracks, Albums and Artists"
      summary: "Add a new track"
      description: "Creates a new track entry."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Track"
      responses:
        "201":
          description: "Track created successfully"

    get:
      tags:
      - "Media Service - Tracks, Albums and Artists"
      summary: "Get all tracks"
      description: "Retrieve all available tracks."
      responses:
        "200":
          description: "Tracks retrieved"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Track"

  /media/tracks/{track_id}:
    get:
      tags:
      - "Media Service - Tracks, Albums and Artists"
      summary: "Get track details"
      parameters:
        - name: "track_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Track details retrieved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
        "404":
          description: "Track not found"
  
    put:
      tags:
      - "Media Service - Tracks, Albums and Artists"
      summary: "Update track"
      parameters:
        - name: "track_id"
          in: path
          required: true
          schema:
            type: string      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Track"
      responses:
        "200":
          description: "Track updated successfully"
  
    delete:
      tags:
      - "Media Service - Tracks, Albums and Artists"
      summary: "Delete track"
      parameters:
        - name: "track_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Track deleted"
        "404":
          description: "Track not found"

  /media/albums:
    post:
      tags:
      - "Media Service - Tracks, Albums and Artists"
      summary: "Create album"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Album"
      responses:
        "201":
          description: "Album created successfully"
          
    get:
      tags:
      - "Media Service - Tracks, Albums and Artists"
      summary: "Get all albums"
      responses:
        "201":
          description: "Albums retrieved successfully"
          
  /media/albums/{album_id}:
    get:
      tags:
      - "Media Service - Tracks, Albums and Artists"
      summary: "Get album details"
      parameters:
        - name: "album_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Album details retrieved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        "404":
          description: "Album not found"
            
    put:
      tags:
      - "Media Service - Tracks, Albums and Artists"
      summary: "Update album"
      parameters:
        - name: "album_id"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Album"
      responses:
        "201":
          description: "Album updated successfully"

    delete:
      tags:
      - "Media Service - Tracks, Albums and Artists"
      summary: "Delete album"
      parameters:
        - name: "album_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Album deleted successfully"
        "404":
          description: "Album not found"

  /media/albums/{album_id}/tracks:
    post:
      tags:
      - "Media Service - Tracks, Albums and Artists"
      summary: "Add a track to an album"
      parameters:
        - name: "album_id"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Track"
      responses:
        "201":
          description: "Track added to album successfully"

    get:
      tags:
      - "Media Service - Tracks, Albums and Artists"
      summary: "Get all tracks from an album"
      parameters:
        - name: "album_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "List of tracks retrieved"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Track"

  /media/albums/{album_id}/tracks/{track_id}:
    delete:
      tags:
      - "Media Service - Tracks, Albums and Artists"
      summary: "Remove a track from an album"
      parameters:
        - name: "album_id"
          in: path
          required: true
          schema:
            type: string
        - name: "track_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Track removed from album successfully"
        "404":
          description: "Track not found"

  /media/artists:
    post:
      tags:
        - "Media Service - Tracks, Albums and Artists"
      summary: "Create an artist profile"
      description: "Registers a new artist in the system."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Artist"
      responses:
        "201":
          description: "Artist created successfully"
  
    get:
      tags:
        - "Media Service - Tracks, Albums and Artists"
      summary: "Get all artists"
      description: "Retrieves a list of all registered artists."
      responses:
        "200":
          description: "List of artists retrieved"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Artist"
  
  /media/artists/{artist_id}:
    get:
      tags:
        - "Media Service - Tracks, Albums and Artists"
      summary: "Get artist details"
      description: "Retrieve details of a specific artist."
      parameters:
        - name: "artist_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Artist details retrieved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        "404":
          description: "Artist not found"
  
    put:
      tags:
        - "Media Service - Tracks, Albums and Artists"
      summary: "Update artist profile"
      description: "Modify details of a specific artist."
      parameters:
        - name: "artist_id"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Artist"
      responses:
        "200":
          description: "Artist updated successfully"
        "404":
          description: "Artist not found"
          
    delete:
      tags:
        - "Media Service - Tracks, Albums and Artists"
      summary: "Delete artist"
      description: "Delete artist."
      parameters:
        - name: "artist_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Artist removed  successfully"
        "404":
          description: "Artist not found"

  /media/artists/{artist_id}/tracks:
    get:
      tags:
        - "Media Service - Tracks, Albums and Artists"
      summary: "Get all tracks from an artist"
      description: "Retrieve all tracks associated with a specific artist."
      parameters:
        - name: "artist_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "List of tracks retrieved"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Track"
  
    post:
      tags:
        - "Media Service - Tracks, Albums and Artists"
      summary: "Add a track to an artist"
      description: "Associate a new track with a specific artist."
      parameters:
        - name: "artist_id"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Track"
      responses:
        "201":
          description: "Track added to artist successfully"
  
  /media/artists/{artist_id}/tracks/{track_id}:
    delete:
      tags:
        - "Media Service - Tracks, Albums and Artists"
      summary: "Remove a track from an artist"
      description: "Disassociate a track from a specific artist."
      parameters:
        - name: "artist_id"
          in: path
          required: true
          schema:
            type: string
        - name: "track_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Track removed from artist successfully"
        "404":
          description: "Track not found for this artist"

# Media service Pocasts and episodes
  /media/podcasts:
    post:
      tags:
        - "Media Service - Podcasts and Episodes"
      summary: "Create a new podcast"
      description: "Registers a new podcast in the system."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Podcast"
      responses:
        "201":
          description: "Podcast created successfully"
        "400":
          description: "Invalid request data"
        "500":
          description: "Internal server error"
  
    get:
      tags:
        - "Media Service - Podcasts and Episodes"
      summary: "Get all podcasts"
      description: "Retrieves a list of all available podcasts."
      responses:
        "200":
          description: "List of podcasts retrieved"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Podcast"
        "500":
          description: "Internal server error"

  /media/podcasts/{podcast_id}:
    get:
      tags:
        - "Media Service - Podcasts and Episodes"
      summary: "Get podcast details"
      description: "Retrieve details of a specific podcast."
      parameters:
        - name: "podcast_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Podcast details retrieved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Podcast"
        "404":
          description: "Podcast not found"
        "500":
          description: "Internal server error"
  
    put:
      tags:
        - "Media Service - Podcasts and Episodes"
      summary: "Update podcast details"
      description: "Modify details of a specific podcast."
      parameters:
        - name: "podcast_id"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Podcast"
      responses:
        "200":
          description: "Podcast updated successfully"
        "400":
          description: "Invalid request data"
        "404":
          description: "Podcast not found"
        "500":
          description: "Internal server error"
  
    delete:
      tags:
        - "Media Service - Podcasts and Episodes"
      summary: "Delete a podcast"
      description: "Removes a specific podcast from the system."
      parameters:
        - name: "podcast_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Podcast deleted successfully"
        "404":
          description: "Podcast not found"
        "500":
          description: "Internal server error"
  
  /media/podcasts/{podcast_id}/episodes:
    post:
      tags:
        - "Media Service - Podcasts and Episodes"
      summary: "Add a new episode to the podcast"
      description: "Adds a new episode to a podcast."
      parameters:
        - name: "podcast_id"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Episode"
      responses:
        "201":
          description: "Episode created successfully"
        "400":
          description: "Invalid episode data"
        "404":
          description: "Podcast not found"
        "500":
          description: "Internal server error"
  
    get:
      tags:
        - "Media Service - Podcasts and Episodes"
      summary: "Get all episodes of a podcast"
      description: "Retrieve all episodes associated with a specific podcast."
      parameters:
        - name: "podcast_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "List of episodes retrieved"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Episode"
        "404":
          description: "Podcast not found"
        "500":
          description: "Internal server error"
  
    put:
      tags:
        - "Media Service - Podcasts and Episodes"
      summary: "Update podcast episodes"
      description: "Updates the list of episodes associated with a podcast."
      parameters:
        - name: "podcast_id"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Episode"
      responses:
        "200":
          description: "Podcast episodes updated successfully"
        "400":
          description: "Invalid episode data"
        "404":
          description: "Podcast or episodes not found"
        "500":
          description: "Internal server error"
  
  /api/podcasts/{podcast_id}/episodes/{episode_id}:
    get:
      tags:
        - "Media Service - Podcasts and Episodes"
      summary: "Get episode details"
      description: "Retrieve details of a specific episode in a podcast."
      parameters:
        - name: "podcast_id"
          in: path
          required: true
          schema:
            type: string
        - name: "episode_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Episode details retrieved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Episode"
        "404":
          description: "Episode not found"
  
    put:
      tags:
        - "Media Service - Podcasts and Episodes"
      summary: "Update episode details"
      description: "Modify details of a specific episode in a podcast."
      parameters:
        - name: "podcast_id"
          in: path
          required: true
          schema:
            type: string
        - name: "episode_id"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Episode"
      responses:
        "200":
          description: "Episode updated successfully"
        "404":
          description: "Episode not found"
  
    delete:
      tags:
        - "Media Service - Podcasts and Episodes"
      summary: "Delete an episode"
      description: "Removes a specific episode from the podcast."
      parameters:
        - name: "podcast_id"
          in: path
          required: true
          schema:
            type: string
        - name: "episode_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Episode deleted successfully"
        "404":
          description: "Episode not found"

#Media service playback
  /media/playback:
    get:
      tags:
        - "Media Service - Playback"
      summary: "Get playback status"
      responses:
        "200":
          description: "Playback status retrieved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playback"
  
  /media/playback/play/{media_id}:
    post:
      tags:
      - "Media Service - Playback"
      summary: "Start playback"
      description: "Starts playing a track, album, or playlist. If no queue is set, it uses suggestions."
      parameters:
        - name: "media_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Playback started successfully"
        "400":
          description: "Invalid media type for playback"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Cannot play media type 'artist'. Only tracks, albums, episodes, and playlists are allowed."
        "404":
          description: "Media not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Track with ID 'track_123' not found."

  /media/playback/stop:
    post:
      tags:
      - "Media Service - Playback"
      summary: "Stop playback"
      description: "Stops the current playback session."
      responses:
        "200":
          description: "Playback stopped successfully"
        "400":
          description: "No active playback session"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No active playback session to stop."

  /media/playback/resume:
    post:
      tags:
      - "Media Service - Playback"
      summary: "Resume playback"
      description: "Resumes playback from where it was paused or stopped."
      responses:
        "200":
          description: "Playback resumed successfully"
        "400":
          description: "No paused track to resume"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No paused playback found. Start playback first."
  
  # Playback Controls
  /media/playback/next:
    post:
      tags:
      - "Media Service - Playback"
      summary: "Skip to next track"
      responses:
        "200":
          description: "Skipped to next track"
  
  /media/playback/previous:
    post:
      tags:
      - "Media Service - Playback"
      summary: "Go to previous track"
      responses:
        "200":
          description: "Returned to previous track"
  
  /media/playback/shuffle:
    put:
      tags:
      - "Media Service - Playback"
      summary: "Shuffle next songs"
      responses:
        "200":
          description: "Shuffle enabled"
  
  /media/playback/repeat:
    put:
      tags:
        - "Media Service - Playback"
      summary: "Repeat the current song"
      responses:
        "200":
          description: "Repeat enabled"


# Search service
  /search:
    get:
      tags:
        - "Search Service"
      summary: "Search across multiple media types"
      parameters:
        - name: "q"
          in: query
          required: true
          schema:
            type: string
        - name: "type"
          in: query
          required: true
          schema:
            type: string
            enum: [all, track, album, playlist, podcast]
      responses:
        "200":
          description: "Search results"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchResults"


# Suggestions Service
  /suggestions:
    get:
      tags:
        - "Suggestion Service"
      summary: "Get general Suggestion"
      description: "Fetch a list of suggested content for the user."
      responses:
        "200":
          description: "Suggestions retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Suggestion"

  /suggestions/new-releases:
    get:
      tags:
        - "Suggestion Service"
      summary: "Get new releases suggestions"
      description: "Fetch newly released tracks and albums."
      responses:
        "200":
          description: "New releases retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Suggestion"

  /suggestions/made-for-you:
    get:
      tags:
        - "Suggestion Service"
      summary: "Get personalized suggestions"
      description: "Fetch music suggestions based on user history."
      responses:
        "200":
          description: "Personalized suggestions retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Suggestion"

  /suggestions/for-followers:
    get:
      tags:
        - "Suggestion Service"
      summary: "Get suggestions based on followers"
      description: "Suggests content based on what the user's followers listen to."
      responses:
        "200":
          description: "Follower-based Suggestions retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Suggestion"

  /suggestions/popular:
    get:
      tags:
        - "Suggestion Service"
      summary: "Get popular Suggestions"
      description: "Fetch the most popular tracks and albums."
      responses:
        "200":
          description: "Popular content retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Suggestion"

  /suggestions/mood-based:
    get:
      tags:
        - "Suggestion Service"
      summary: "Get mood-based suggestions"
      description: "Fetch tracks recommended based on mood."
      responses:
        "200":
          description: "Mood-based suggestions retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Suggestion"

  /suggestions/similar-to/{track_id}:
    get:
      tags:
        - "Suggestion Service"
      summary: "Get similar tracks"
      description: "Suggests tracks similar to the specified track."
      parameters:
        - name: "track_id"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Similar tracks retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Suggestion"
        "404":
          description: "Track not found"

components:
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          description: "Password should be stored as a hash."
          example: "$2b$12$5kCmN3JbL2H3KtZCpLQv/e99pIv0f8y"

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsIn..."
        refresh_token:
          type: string
          example: "def50200e5a3b..."
        expires_in:
          type: integer
          description: "Expire time in seconds."
          example: 3600

    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
          example: "def50200e5a3b..."
        grant_type:
          type: string
          example: "refresh_token"

    VerificationRequest:
      type: object
      properties:
        token:
          type: string
          example: "112345"
        method:
          type: string
          enum: [email, phone]
          example: "email"

    Session:
      type: object
      properties:
        session_id:
          type: string
          example: "asS23Dfghfhd5445Ls"
        user_id:
          type: string
          example: "asdsds6fds445F"
        created_at:
          type: string
          format: date-time
          example: "2024-03-18T12:00:00Z"
        last_active:
          type: string
          format: date-time
          example: "2024-03-18T12:30:00Z"
        device:
          type: string
          example: "Chrome on Windows 11"
        ip_address:
          type: string
          format: ipv4
          example: "192.168.1.100"
          
    User:
      type: object
      properties:
        id:
          type: string
          example: "asdsds6fds445F"
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phone_number:
          type: string
          format: phone
          example: "+351 912345678"
        user_type:
          type: string
          enum: ["user", "admin"]
          example: "user"
        hashed_password:
          type: string
          description: "Password hash stored securely"
          example: "$2b$12$5kCmN3JbL2H3KtZCpLQv/e99pIv0f8y"
        created_at:
          type: string
          format: date-time
          example: "2024-03-18T12:00:00Z"

    UserUpdate:
      type: object
      properties:
        username:
          type: string
          example: "john_doe_updated"
        email:
          type: string
          format: email
          example: "john.doe.new@example.com"
        phone_number:
          type: string
          format: phone
          example: "+44 912345678"

    Profile:
      type: object
      properties:
        display_name:
          type: string
          example: "John Doe"
        avatar_url:
          type: string
          format: uri
          example: "https://cdn.example.com/avatars/user_456.png"
        bio:
          type: string
          example: "Music lover and playlist curator."
        is_public:
          type: boolean
          example: true

    ProfileUpdate:
      type: object
      properties:
        display_name:
          type: string
          example: "John Doe Updated"
        avatar_url:
          type: string
          format: uri
          example: "https://cdn.example.com/avatars/user_456_updated.png"
        bio:
          type: string
          example: "Updated bio here."
        is_public:
          type: boolean
          example: false

    Following:
      type: object
      properties:
        following:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: "a32GGda2887sFG2"
              type:
                type: string
                enum: ["user", "artist", "podcast"]
                example: "artist"

    AccountStatus:
      type: object
      properties:
        status:
          type: string
          enum: ["active", "suspended", "banned", "deactivated"]
          example: "active"
        last_updated:
          type: string
          format: date-time
          example: "2024-03-18T12:30:00Z"

    Activity:
      type: object
      properties:
        event_type:
          type: string
          example: "played_track"
        event_data:
          type: string
          example: "3YuaBvuZqcwN3CEAyyoaei"
        timestamp:
          type: string
          format: date-time
          example: "2024-03-18T12:30:00Z"
        details:
          type: object
          properties:
            session_id:
              type: string
              example: "asS23Dfghfhd5445Ls"
            location:
              type: string
              example: "Lisbon, Portugal"
          
    Track:
      type: object
      properties:
        track_id:
          type: string
          example: "3YuaBvuZqcwN3CEAyyoaei"
        title:
          type: string
          example: "Like a stone"
        artist_id:
          type: string
          example: "2ziB7fzrXBoh1HUPS6sVFn"
        album_id:
          type: string
          example: "293aYSIVNjjmkAwupnlxRd"
        duration:
          type: integer
          example: 293  # segundos 
        track_number:
          type: integer
          example: 5  # Número da faixa no álbum
        genre:
          type: array
          items:
            type: string
            example: ["Hard Rock", "Alternative Metal"]
        explicit:
          type: boolean
          example: true
        release_date:
          type: string
          format: date-time
          example: "2002-11-18T00:00:00Z"
        audio_url:
          type: string
          format: uri
          example: "https://example.com/audio/like_a_stone.mp3"
        cover_url:
          type: string
          format: uri
          example: "https://example.com/images/track_example.jpg"

    Album:
      type: object
      properties:
        album_id:
          type: string
          example: "293aYSIVNjjmkAwupnlxRd"
        title:
          type: string
          example: "Audioslave"
        artist_id:
          type: string
          example: "2ziB7fzrXBoh1HUPS6sVFn"
        genre:
          type: array
          items:
            type: string
            example: ["Hard Rock", "Alternative Metal"]
        release_date:
          type: string
          format: date
          example: "2002-11-18"
        cover_url:
          type: string
          format: uri
          example: "https://example.com/images/album_example.jpg"

    Artist:
      type: object
      properties:
        artist_id:
          type: string
          example: "2ziB7fzrXBoh1HUPS6sVFn"
        name:
          type: string
          example: "Audioslave"
        bio:
          type: string
          example: "An American rock supergroup formed in 2001."
        cover_url:  
          type: string
          format: uri
          example: "https://example.com/images/artist_example.jpg"
        genre:
          type: array
          items:
            type: string
            example: "Hard rock"
          example: ["Hard rock", "Alternative Metal", "Post-grunge", "Alternative Rock"]
        followers:
          type: integer
          example: 50000000

    Playlist:
      type: object
      properties:
        playlist_id:
          type: string
          example: "sd2dsa231fggFsd3"
        name:
          type: string
          example: "My Rock Playlist"
        description:
          type: string
          example: "Best rock songs from all time."
        owner_id:
          type: string
          example: "asdsds6fds445F"
        cover_url:
          type: string
          format: uri
          example: "https://example.com/images/playlist_example.jpg"
        tracks:
          type: array
          items:
            type: string
            example: "3YuaBvuZqcwN3CEAyyoaei"  # IDs das faixas armazenados aqui
            
    Podcast:
      type: object
      properties:
        podcast_id:
          type: string
          example: "2OSrNmY2aRczyjLyRPJqxM"
        title:
          type: string
          example: "Watch.tm"
        host:
          type: string
          example: "Pedro Teixeira da Mota"
        description:
          type: string
          example: "watch.tm é obviamente um podcast de Pedro Teixeira da Mota."
        cover_url:
          type: string
          format: uri
          example: "https://example.com/images/watchtm_example.jpg"

    Episode:
      type: object
      properties:
        episode_id:
          type: string
          example: "0LOU2eIRUWEpzgPmnV0aYN"
        title:
          type: string
          example: "MIGUEL LUZ  #92"
        podcast_id:
          type: string
          example: "2OSrNmY2aRczyjLyRPJqxM"
        duration:
          type: integer
          example: 6540  # 1 hora 49 minutos
        release_date:
          type: string
          format: date
          example: "2025-03-16"
        audio_url:
          type: string
          format: uri
          example: "https://example.com/audio/watchtm_92.mp3"

    PlaylistUpdate:
      type: object
      properties:
        title:
          type: string
          example: "My Updated Playlist"
        description:
          type: string
          example: "Updated description for my rock playlist."
        tracks:
          type: array
          items:
            type: string
            example: "7YuaDvuZqcwN3CEByyoaei"  # Permite modificar a ordem das faixas
        cover_url:
          type: string
          format: uri
          example: "https://example.com/images/playlist_example.jpg"

    Playback:
      type: object
      properties:
        track_id:
          type: string
          example: "track_001"
        status:
          type: string
          enum: ["playing", "paused", "stopped"]
          example: "playing"
        playback_position:
          type: integer
          description: "Current playback position in seconds."
          example: 125  # A música está em 2 minutos e 5 segundos

          
    SearchResults:
      type: object
      properties:
        query:
          type: string
        type:
          type: string
          enum: ["track", "album", "artist", "playlist"]
        results:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              type:
                type: string

    Suggestion:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        type:
          type: string
          enum: ["track", "album", "playlist", "artist"]
        recommended_by:
          type: string
          description: "Reason for the suggestion (e.g., 'based on your listening history')"
        similarity_score:
          type: number
          format: float
          example: 0.85
          
    Favorite:
      type: object
      properties:
        favorite_id:
          type: string
          example: "fav_12345"
        user_id:
          type: string
          example: "user_6789"
        media_id:
          type: string
          example: "track_9876"
        media_type:
          type: string
          enum: [track, album, podcast]
          example: "track"
        added_at:
          type: string
          format: date-time
          example: "2025-03-20T12:45:00Z"
          
    Queue:
      type: object
      properties:
        user_id:
          type: string
          example: "user_123"
        queue_items:
          type: array
          items:
            type: object
            properties:
              media_id:
                type: string
                example: "track_987"
              media_type:
                type: string
                enum: [track, episode]
                example: "track"
              added_at:
                type: string
                format: date-time
                example: "2025-03-20T14:00:00Z"